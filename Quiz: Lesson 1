Quiz: Lesson 1 Solution

 
Why do they call it a relational database?
Because tables in a database have relationships using foreign keys

What is SQL?
SQL stands for "Structured Query Language" manages databases.
There are two predominant views into a relational database. What are they, and how are they different?
Data view and schema view
In a table, what do we call the column that serves as the main identifier for a row of data? We're looking for the general database term, not the column name.
We call this the "primary key".

What is a foreign key, and how is it used?
A foreign key is the identifier that connects an association with the models involved. The foreign key is always on the "many" side and is always in an integer type.

At a high level, describe the ActiveRecord pattern. This has nothing to do with Rails, but the actual pattern that ActiveRecord uses to perform its ORM duties.
ActiveRecord is a way to access the database. A database table is related to a class and an object from that class is created as a row in the table. The objects values are the columns in the table. We use ActiveRecord to alter the data in these tables.

If there's an ActiveRecord model called "CrazyMonkey", what should the table name be?
crazy_monkeys
To figure out what any table name should be you can add tableize to the end of any Model name.

If I'm building a 1:M association between Project and Issue, what will the model associations and foreign key be?
In the Project model:

class Project < ActiveRecord::Base
   has_many :issues, foreign_key: :project_id
end

class Issue < ActiveRecord::Base
   belongs_to :project, foreign_key: :project_id
end
The foreign key is project_id.

Given this code
class Zoo
   has_many :animals
end

What do you expect the other model to be and what does database schema look like?

class Animal
   belongs_to :zoo
end

The tables will be named:
zoos with a primary key of id
animals with a primary key of id and a foreign key zoo_id

What are the methods that are now available to a zoo to call related to animals?

zoo.animals to get a list of the animals
zoo.animals.first to get the first animal
It also depends on what other attributes you include about the animals

How do I create an animal called "jumpster" in a zoo called "San Diego Zoo"?
Zoo.create(name: 'San Diego Zoo')
To see what id was set you can do Zoo.last
Lets say it says id: 3
You create the animal and set the zoo_id to 3
Animal.create(name: 'jumpster', zoo_id: 3)

What is mass assignment? What's the non-mass assignment way of setting values?
Mass assignment is when you set multiple attributes when you create a new object.  Non-mass assignment is when you only set one attribute at a time.

What does this code do? Animal.first
It returns the first animal in the table

If I have a table called "animals" with columns called "name", and a model called Animal, how do I instantiate an animal object with name set to "Joe". Which methods makes sure it saves to the database?
Create will save the object
 animal = Animal.create(name: 'Joe')

How does a M:M association work at the database level?
On the database level of a M:M association, we use a join table to support it. Both of the primary models will each have a 1:M association with the join table.
By using the has_many :through technique, we are able to create an indirect M:M association with the two primary models.

What are the two ways to support a M:M association at the ActiveRecord model level? Pros and cons of each approach?
The two ways to support a M:M association are the has_many :through and has_and_belongs_to_manymethods.

has_many :through requires an explicit join model and a join table, but it is more flexible and we can add additional attributes to the join table.
has_and_belongs_to_many doesn't require a join model or a join table, but it is less flexible and we cannot add additional attributes to the join table.

Suppose we have a User model and a Group model, and we have a M:M association all set up. How do we associate the two?
We will need to use a join model(UserGroup) and table(user_groups) in this situation.

The User model:

class User < ActiveRecord::Base
    has_many :user_groups, foreign_key: :user_id
    has_many :groups, through: :user_groups
end
The User_Group model:

class UserGroup < ActiveRecord::Base
    belongs_to :user, foreign_key: :user_id
    belongs_to :group, foreign_key: :group_id
end
The Group model:

class Group < ActiveRecord::Base
    has_many :user_groups, foreign_key: :group_id
    has_many :users, through: :user_groups
end
 